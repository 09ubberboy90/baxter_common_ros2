// Generated by gencpp from file baxter_bridge/BaxterPublisher.msg
// DO NOT EDIT!


#ifndef BAXTER_BRIDGE_MESSAGE_BAXTERPUBLISHER_H
#define BAXTER_BRIDGE_MESSAGE_BAXTERPUBLISHER_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace baxter_bridge
{
template <class ContainerAllocator>
struct BaxterPublisher_
{
  typedef BaxterPublisher_<ContainerAllocator> Type;

  BaxterPublisher_()
    : topic()
    , user()
    , time(0.0)  {
    }
  BaxterPublisher_(const ContainerAllocator& _alloc)
    : topic(_alloc)
    , user(_alloc)
    , time(0.0)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _topic_type;
  _topic_type topic;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _user_type;
  _user_type user;

   typedef double _time_type;
  _time_type time;





  typedef boost::shared_ptr< ::baxter_bridge::BaxterPublisher_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::baxter_bridge::BaxterPublisher_<ContainerAllocator> const> ConstPtr;

}; // struct BaxterPublisher_

typedef ::baxter_bridge::BaxterPublisher_<std::allocator<void> > BaxterPublisher;

typedef boost::shared_ptr< ::baxter_bridge::BaxterPublisher > BaxterPublisherPtr;
typedef boost::shared_ptr< ::baxter_bridge::BaxterPublisher const> BaxterPublisherConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::baxter_bridge::BaxterPublisher_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::baxter_bridge::BaxterPublisher_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::baxter_bridge::BaxterPublisher_<ContainerAllocator1> & lhs, const ::baxter_bridge::BaxterPublisher_<ContainerAllocator2> & rhs)
{
  return lhs.topic == rhs.topic &&
    lhs.user == rhs.user &&
    lhs.time == rhs.time;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::baxter_bridge::BaxterPublisher_<ContainerAllocator1> & lhs, const ::baxter_bridge::BaxterPublisher_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace baxter_bridge

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::baxter_bridge::BaxterPublisher_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::baxter_bridge::BaxterPublisher_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::baxter_bridge::BaxterPublisher_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::baxter_bridge::BaxterPublisher_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::baxter_bridge::BaxterPublisher_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::baxter_bridge::BaxterPublisher_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::baxter_bridge::BaxterPublisher_<ContainerAllocator> >
{
  static const char* value()
  {
    return "db21670d44d938bbb7138f7edc37b7ae";
  }

  static const char* value(const ::baxter_bridge::BaxterPublisher_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdb21670d44d938bbULL;
  static const uint64_t static_value2 = 0xb7138f7edc37b7aeULL;
};

template<class ContainerAllocator>
struct DataType< ::baxter_bridge::BaxterPublisher_<ContainerAllocator> >
{
  static const char* value()
  {
    return "baxter_bridge/BaxterPublisher";
  }

  static const char* value(const ::baxter_bridge::BaxterPublisher_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::baxter_bridge::BaxterPublisher_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string topic\n"
"string user\n"
"float64 time\n"
;
  }

  static const char* value(const ::baxter_bridge::BaxterPublisher_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::baxter_bridge::BaxterPublisher_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.topic);
      stream.next(m.user);
      stream.next(m.time);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BaxterPublisher_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::baxter_bridge::BaxterPublisher_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::baxter_bridge::BaxterPublisher_<ContainerAllocator>& v)
  {
    s << indent << "topic: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.topic);
    s << indent << "user: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.user);
    s << indent << "time: ";
    Printer<double>::stream(s, indent + "  ", v.time);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BAXTER_BRIDGE_MESSAGE_BAXTERPUBLISHER_H
