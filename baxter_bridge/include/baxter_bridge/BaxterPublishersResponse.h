// Generated by gencpp from file baxter_bridge/BaxterPublishersResponse.msg
// DO NOT EDIT!


#ifndef BAXTER_BRIDGE_MESSAGE_BAXTERPUBLISHERSRESPONSE_H
#define BAXTER_BRIDGE_MESSAGE_BAXTERPUBLISHERSRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <baxter_bridge/BaxterPublisher.h>

namespace baxter_bridge
{
template <class ContainerAllocator>
struct BaxterPublishersResponse_
{
  typedef BaxterPublishersResponse_<ContainerAllocator> Type;

  BaxterPublishersResponse_()
    : publishers()
    , authorized_user()  {
    }
  BaxterPublishersResponse_(const ContainerAllocator& _alloc)
    : publishers(_alloc)
    , authorized_user(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector< ::baxter_bridge::BaxterPublisher_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::baxter_bridge::BaxterPublisher_<ContainerAllocator> >::other >  _publishers_type;
  _publishers_type publishers;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _authorized_user_type;
  _authorized_user_type authorized_user;





  typedef boost::shared_ptr< ::baxter_bridge::BaxterPublishersResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::baxter_bridge::BaxterPublishersResponse_<ContainerAllocator> const> ConstPtr;

}; // struct BaxterPublishersResponse_

typedef ::baxter_bridge::BaxterPublishersResponse_<std::allocator<void> > BaxterPublishersResponse;

typedef boost::shared_ptr< ::baxter_bridge::BaxterPublishersResponse > BaxterPublishersResponsePtr;
typedef boost::shared_ptr< ::baxter_bridge::BaxterPublishersResponse const> BaxterPublishersResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::baxter_bridge::BaxterPublishersResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::baxter_bridge::BaxterPublishersResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::baxter_bridge::BaxterPublishersResponse_<ContainerAllocator1> & lhs, const ::baxter_bridge::BaxterPublishersResponse_<ContainerAllocator2> & rhs)
{
  return lhs.publishers == rhs.publishers &&
    lhs.authorized_user == rhs.authorized_user;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::baxter_bridge::BaxterPublishersResponse_<ContainerAllocator1> & lhs, const ::baxter_bridge::BaxterPublishersResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace baxter_bridge

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::baxter_bridge::BaxterPublishersResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::baxter_bridge::BaxterPublishersResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::baxter_bridge::BaxterPublishersResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::baxter_bridge::BaxterPublishersResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::baxter_bridge::BaxterPublishersResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::baxter_bridge::BaxterPublishersResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::baxter_bridge::BaxterPublishersResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "dff141fcf892d40328b8d8594fdeb53d";
  }

  static const char* value(const ::baxter_bridge::BaxterPublishersResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xdff141fcf892d403ULL;
  static const uint64_t static_value2 = 0x28b8d8594fdeb53dULL;
};

template<class ContainerAllocator>
struct DataType< ::baxter_bridge::BaxterPublishersResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "baxter_bridge/BaxterPublishersResponse";
  }

  static const char* value(const ::baxter_bridge::BaxterPublishersResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::baxter_bridge::BaxterPublishersResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "BaxterPublisher[] publishers\n"
"string authorized_user\n"
"\n"
"\n"
"================================================================================\n"
"MSG: baxter_bridge/BaxterPublisher\n"
"string topic\n"
"string user\n"
"float64 time\n"
;
  }

  static const char* value(const ::baxter_bridge::BaxterPublishersResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::baxter_bridge::BaxterPublishersResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.publishers);
      stream.next(m.authorized_user);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct BaxterPublishersResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::baxter_bridge::BaxterPublishersResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::baxter_bridge::BaxterPublishersResponse_<ContainerAllocator>& v)
  {
    s << indent << "publishers[]" << std::endl;
    for (size_t i = 0; i < v.publishers.size(); ++i)
    {
      s << indent << "  publishers[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::baxter_bridge::BaxterPublisher_<ContainerAllocator> >::stream(s, indent + "    ", v.publishers[i]);
    }
    s << indent << "authorized_user: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.authorized_user);
  }
};

} // namespace message_operations
} // namespace ros

#endif // BAXTER_BRIDGE_MESSAGE_BAXTERPUBLISHERSRESPONSE_H
